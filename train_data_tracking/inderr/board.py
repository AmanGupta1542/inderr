
import time
from .serial_connection import serial_connection, TIME_DELAY
import logging
logger = logging.getLogger("inderr.board")

CHAR_MATRICES = {
  '1': [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0001100000000000',
    '0011100000000000',
    '0111100000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0111111000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '2': [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0111110000000000',
    '1100011000000000',
    '0000011000000000',
    '0000110000000000',
    '0001100000000000',
    '0011000000000000',
    '0110000000000000',
    '1100000000000000',
    '1100011000000000',
    '1111111000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '3': [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0111110000000000',
    '1100011000000000',
    '0000011000000000',
    '0000011000000000',
    '0011110000000000',
    '0000011000000000',
    '0000011000000000',
    '0000011000000000',
    '1100011000000000',
    '0111110000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '4': [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000110000000000',
    '0001110000000000',
    '0011110000000000',
    '0110110000000000',
    '1100110000000000',
    '1111111000000000',
    '0000110000000000',
    '0000110000000000',
    '0000110000000000',
    '0001111000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '5': [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1111111000000000',
    '1100000000000000',
    '1100000000000000',
    '1100000000000000',
    '1111110000000000',
    '0000011000000000',
    '0000011000000000',
    '0000011000000000',
    '0000011000000000',
    '1111110000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '6': [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0011100000000000',
    '0110000000000000',
    '1100000000000000',
    '1100000000000000',
    '1111110000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '0111110000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '7': [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1111111000000000',
    '1100011000000000',
    '0000011000000000',
    '0000011000000000',
    '0000110000000000',
    '0001100000000000',
    '0011000000000000',
    '0011000000000000',
    '0011000000000000',
    '0011000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '8': [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0111110000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '0111110000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '0111110000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '9': [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0111110000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '0111111000000000',
    '0000011000000000',
    '0000011000000000',
    '0000011000000000',
    '0000110000000000',
    '0111100000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '0': [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0011110000000000',
    '0110011000000000',
    '1100001100000000',
    '1101101100000000',
    '1101101100000000',
    '1100001100000000',
    '1100001100000000',
    '0110011000000000',
    '0011110000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '!' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0001100000000000',
    '0011110000000000',
    '0011110000000000',
    '0011110000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0000000000000000',
    '0001100000000000',
    '0001100000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '?' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0111110000000000',
    '1100011000000000',
    '1100011000000000',
    '0000110000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0000000000000000',
    '0001100000000000',
    '0001100000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '#' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0110110000000000',
    '0110110000000000',
    '1111111000000000',
    '0110110000000000',
    '0110110000000000',
    '0110110000000000',
    '1111111000000000',
    '0110110000000000',
    '0110110000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '$' : [
     '0000000000000000',
    '0001100000000000',
    '0001100000000000',
    '0111110000000000',
    '1100011000000000',
    '1100001000000000',
    '1100000000000000',
    '0111110000000000',
    '0000011000000000',
    '0000011000000000',
    '1000011000000000',
    '1100011000000000',
    '0111110000000000',
    '0001100000000000',
    '0001100000000000',
    '0000000000000000'
  ],
  '%' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1100001000000000',
    '1100011000000000',
    '0000110000000000',
    '0001100000000000',
    '0011000000000000',
    '0110000000000000',
    '1100011000000000',
    '1000011000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '&' : [
     '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0011100000000000',
    '0110110000000000',
    '0110110000000000',
    '0011100000000000',
    '0111011000000000',
    '1101110000000000',
    '1100110000000000',
    '1100110000000000',
    '1100110000000000',
    '0111011000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  '-': [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0011110000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
  ] , 
  ',': [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0011000000000000',
    '0000000000000000',
    '0000000000000000',
  ],




  'A' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0001000000000000',
    '0011100000000000',
    '0110110000000000',
    '1100011000000000',
    '1100011000000000',
    '1111111000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'B' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1111110000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0111110000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '1111110000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'C' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0011110000000000',
    '0110011000000000',
    '1100001000000000',
    '1100000000000000',
    '1100000000000000',
    '1100000000000000',
    '1100000000000000',
    '1100001000000000',
    '0110011000000000',
    '0011110000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'D' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1111100000000000',
    '0110110000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0110110000000000',
    '1111100000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'E' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1111111000000000',
    '0110011000000000',
    '0110001000000000',
    '0110100000000000',
    '0111100000000000',
    '0110100000000000',
    '0110000000000000',
    '0110001000000000',
    '0110011000000000',
    '1111111000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'F' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1111111000000000',
    '0110011000000000',
    '0110001000000000',
    '0110100000000000',
    '0111100000000000',
    '0110100000000000',
    '0110000000000000',
    '0110000000000000',
    '0110000000000000',
    '1111000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'G' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0011110000000000',
    '0110011000000000',
    '1100001000000000',
    '1100000000000000',
    '1100000000000000',
    '1101111000000000',
    '1100011000000000',
    '1100011000000000',
    '0110011000000000',
    '0011101000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'H' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1111111000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'I' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0011110000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0011110000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'J' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0011110000000000',
    '0000110000000000',
    '0000110000000000',
    '0000110000000000',
    '0000110000000000',
    '0000110000000000',
    '1100110000000000',
    '1100110000000000',
    '1100110000000000',
    '0111100000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'K' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0110110000000000',
    '0111100000000000',
    '0111100000000000',
    '0111100000000000',
    '0110011000000000',
    '0110011000000000',
    '1110011000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'L' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1111000000000000',
    '0110000000000000',
    '0110000000000000',
    '0110000000000000',
    '0110000000000000',
    '0110000000000000',
    '0110000000000000',
    '0110001000000000',
    '0110011000000000',
    '1111111000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'M' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1100001100000000',
    '1110011100000000',    
    '1111111100000000',
    '1111111100000000',
    '1101101100000000',
    '1100001100000000',
    '1100001100000000',
    '1100001100000000',
    '1100001100000000',
    '1100001100000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'N' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1100011000000000',
    '1110011000000000',
    '1111011000000000',
    '1111111000000000',
    '1101111000000000',
    '1100111000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'O' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0111110000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '0111110000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'P' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1111110000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0111110000000000',
    '0110000000000000',
    '0110000000000000',
    '0110000000000000',
    '0110000000000000',
    '1111000000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'Q' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0111110000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1100011000000000',
    '1101011000000000',
    '1101111000000000',
    '0111110000000000',
    '0000110000000000',
    '0000111000000000',
    '0000000000000000'
  ],
  'R' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1111110000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0111110000000000',
    '0110110000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '1110011000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'S' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0111110000000000',
    '1100011000000000',
    '1100011000000000',
    '0110000000000000',
    '0011100000000000',
    '0000110000000000',
    '0000011000000000',
    '1100011000000000',
    '1100011000000000',
    '0111110000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],
  'T' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1111111100000000',
    '1101101100000000',
    '1001100100000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0011110000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],

'U' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0110011000000000',
    '0011111000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],

'V' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1100001100000000',
    '1100001100000000',
    '1100001100000000',
    '1100001100000000',
    '1100001100000000',
    '1100001100000000',
    '1100001100000000',
    '0110011000000000',
    '0011110000000000',
    '0001100000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],

'W' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1100001100000000',
    '1100001100000000',
    '1100001100000000',
    '1100001100000000',
    '1100001100000000',
    '1101101100000000',
    '1101101100000000',
    '1111111100000000',
    '0110011000000000',
    '0110011000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],

'X' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1100001100000000',
    '1100001100000000',
    '0110011000000000',
    '0011110000000000',
    '0001100000000000',
    '0001100000000000',
    '0011110000000000',
    '0110011000000000',
    '1100001100000000',
    '1100001100000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],

'Y' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1100001100000000',
    '1100001100000000',
    '1100001100000000',
    '0110011000000000',
    '0011110000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0001100000000000',
    '0011110000000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],

'Z' : [
    '0000000000000000',
    '0000000000000000',
    '0000000000000000',
    '1111111100000000',
    '1100001100000000',
    '1000011000000000',
    '0000110000000000',
    '0001100000000000',
    '0011000000000000',
    '0110000000000000',
    '1100000100000000',
    '1100001100000000',
    '1111111100000000',
    '0000000000000000',
    '0000000000000000',
    '0000000000000000'
  ],

}


DEFAULT = "WELCOME TO THE INDIAN RAILWAYS"
MOVING_LOOP_COUNT = 2


class LEDBoard:
    def __init__(self):
        self.default_message_byte_list = None
        self.fix_coach = False
        self.ser = serial_connection
        self.occupy = False
        self.time_delay_col = TIME_DELAY
        self.time_delay = 1/self.time_delay_col

    def set_data(self, data):
        self.data = data

    # Exclude 'ser' attribute from being pickled
    def __getstate__(self):
        state = self.__dict__.copy()
        if 'ser' in state:
            del state['ser']
        return state

    def __setstate__(self, state):
        self.__dict__.update(state)
        self.ser = serial_connection

    # Method to convert given binary to the hexadecimal code.
    def binToHexa(self, n):
        bnum = int(n)
        temp = 0
        mul = 1
        
        # counter to check group of 4
        count = 1
        
        # char array to store hexadecimal number
        hexaDeciNum = ['0'] * 100
        
        # counter for hexadecimal number array
        i = 0
        while bnum != 0:
            rem = bnum % 10
            temp = temp + (rem*mul)
            
            # check if group of 4 completed
            if count % 4 == 0:
            
                # check if temp < 10
                if temp < 10:
                    hexaDeciNum[i] = chr(temp+48)
                else:
                    hexaDeciNum[i] = chr(temp+55)
                mul = 1
                temp = 0
                count = 1
                i = i+1
                
            # group of 4 is not completed
            else:
                mul = mul*2
                count = count+1
            bnum = int(bnum/10)
            
        # check if at end the group of 4 is not
        # completed
        if count != 1:
            hexaDeciNum[i] = chr(temp+48)
            
        # check at end the group of 4 is completed
        if count == 1:
            i = i-1
            
        # ## printing hexadecimal number
        # array in reverse order
        # ## print("\n Hexadecimal equivalent of {}: ".format(n), end="")
        hex_str = ''
        while i >= 0:
            hex_str += hexaDeciNum[i] 
            # ## print(end=hexaDeciNum[i])
            i = i-1
        return hex_str if hex_str else '0'

    def binFormat(self, n):
        if int(n) == 0:
            return ''
        num_len = len(n)
        
        if num_len > 16:
            return ''
        elif num_len != 16:
            spaces = '0'*(16-num_len)
            new_n = spaces+n
        else:
            new_n = n
        bin_l =['','','','']
        # bin_l[1] = new_n[0:4]
        # bin_l[0] = new_n[4:8]
        # bin_l[2] = new_n[12:] #lsb to msb
        # bin_l[3] = new_n[8:12] #lsb to msb
        bin_l[3] = new_n[0:4]
        bin_l[2] = new_n[4:8]
        bin_l[0] = new_n[12:] #lsb to msb
        bin_l[1] = new_n[8:12] #lsb to msb
        hex_list = []
        for l in bin_l:
            hex_list.append(self.binToHexa(l[::-1])) #lsb to msb
        hex_str = "".join(hex_list)
        return hex_str[0:2]+" "+hex_str[2:]

    def generate(self, bin_list):
        # formating data, taking columns data top to bottom
        formated_list = ['']*len(bin_list)
        for l in bin_list:
            count = 0
            for i in l:
                formated_list[count] += i
                count+=1

        # reversing formated_list, which reverse every element from list, 
        # means reading matrix column from bottom to top
        rev_for = []
        for r in formated_list:
            rev_for.append(r[::-1])

        # Generating hexadecimal representation for each element of rev_list.
        hex_list = []
        for i in rev_for:
            hex_l = self.binFormat(i)
            if hex_l:
                hex_list.append(hex_l)
        byte_list = [bytes.fromhex(item.replace(' ', '')) for item in hex_list]
        return byte_list

    def add_zero(self, s):
        ss =s.split(" ")
        if len(ss[1])>1:
            return s
        else:
            return ss[0]+" 0"+ss[1]

    def hex_string_to_bytes(self, hex_string):
        hex_values = hex_string.split()
        byte_values = [int(value, 16) for value in hex_values]
        return bytes(byte_values)

    def run(self, data, run_default=False, store_default=False):
        if self.default_message_byte_list is not None and run_default:
            byte_list = self.default_message_byte_list
        else:
            byte_list = []
            for i in data:
                time.sleep(self.time_delay)
                if(i == ' '):
                    byte_list.append(b'\x00\x00')
                    byte_list.append(b'\x00\x00')
                else:
                    byte_list.extend(self.generate(CHAR_MATRICES[i]))
                    byte_list.append(b'\x00\x00')
            # Storing default running text generated byte list
            if store_default and run_default:
                clear = [b'\x00\x00']*128
                byte_list.extend(clear)
                self.default_message_byte_list = byte_list
        for i in byte_list:
            self.send_data(i)
            time.sleep(self.time_delay)

    def clear(self, no_of_times):
        for t in range(no_of_times):
            self.send_data(b'\x00\x00')
            time.sleep(self.time_delay)

    def default(self):
        self.occupy = True
        if self.default_message_byte_list is None:
          self.send_strt()
          self.send_fix_data('')
          self.send_end()
          self.run(DEFAULT, True, True)
        else:
          self.run(DEFAULT, True)
        self.occupy = False

    def send_data(self, data):
        try:
            self.ser.write(data)

        except Exception as e:
            print(f"Error: {e}")
    
    def close_ser(self):
        self.ser.close()

    def fix_side(self, data):
        self.send_strt()
        self.send_fix_data(data)

    def send_strt(self):
        message = "STRT"
        ascii_values = [ord(char) for char in message]
        # Send each ASCII value over the serial connection
        for ascii_val in ascii_values:
            self.ser.write(bytes([ascii_val]))

    def send_fix_data(self, g_data):
        # self.send_data(b'\x18\x3C\x7E\xE7\xC3\xC3\xC3\xC3\xFF\xFF\xC3\xC3\xC3\xC3\xC3\xC3\x18\x3C\x7E\xE7\xC3\xC3\xC3\xC3\xFF\xFF\xC3\xC3\xC3\xC3\xC3\xC3\x18\x3C\x7E\xE7\xC3\xC3\xC3\xC3\xFF\xFF\xC3\xC3\xC3\xC3\xC3\xC3\x01\x01\x01\x01')
        data = str(g_data)
        data_len = len(data)
        byte_data = []
        hex_list = []
        for character in data:
            char_matrix = CHAR_MATRICES[character]
            for i in range(len(char_matrix)):
                bin_n = int(char_matrix[i][0:8])
                if bin_n == 0:
                    hex_list.append('00')
                else:
                    hex_list.append(self.binToHexa(char_matrix[i][0:8]))
        # 4 dummy bytes to clear buffer
        hex_list.extend(['01','01','01','01'])
        hex_list_new = []
        for x in hex_list:
            if len(x) == 1:
                hex_list_new.append("0"+x)
            else:
                hex_list_new.append(x)
        # Convert hex strings to bytes
        output_bytes = bytes.fromhex(''.join(hex_list_new))
        # Convert each hexadecimal string to byte and join them
        # output_bytes = bytes([int(x, 16) for x in input_list])
        self.send_data(output_bytes)

        byte_value_for_end = (data_len).to_bytes(1, byteorder='big')

        self.send_col_data(byte_value_for_end)

    def send_fix_data_old(self):
        byte_list = [
            b'\xff\xff\xff', b'\x00\x00', b'\x00\x00', b'\x00\x00', b'\x00\x00',
            b'\x00\x00', b'\x00\x00', b'\x00\x00', b'\x00\x00', b'\x00\x00',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
        ]

        byte_data = b'\x01\x08\x00\x01\x08\x00\x03\x0C\x00\x03\x0C\x00\x07\x0E\x00\x07\x0E\x00\x0E\x07\x00\x0E\x07\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0F\x0F\x00\x0F\x0F\x00\x0F\x0F\x00\x0F\x0F\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00\x0C\x03\x00'
        byte_data = [b'\x00\x00', b'\x00\x7c', b'\x00\x7e', b'\x00\x13', b'\x00\x13', b'\x00\x7e', b'\x00\x7c', b'\x00\x00']
        byte_data = [b'\x00\x00', b'\x7c\x00', b'\x7e\x00', b'\x13\x00', b'\x13\x00', b'\x7e\x00', b'\x7c\x00', b'\x00\x00']
        # lst to msb
        byte_data = [b'\x00\x00', b'\x3e\x00', b'\x7e\x00', b'\xc8\x00', b'\xc8\x00', b'\x7e\x00', b'\x3e\x00', b'\x00\x00']
        byte_data = [b'\x00\x00', b'\x00\x3e', b'\x00\x7e', b'\x00\xc8', b'\x00\xc8', b'\x00\x7e', b'\x00\x3e', b'\x00\x00']
        # byte_data = [b'\x00\x00', b'\x00|', b'\x00~', b'\x00\x13', b'\x00\x13', b'\x00~', b'\x00|', b'\x00\x00']
        # self.send_data(b'\x00')
        byte_data = [b'\x00\x00', b'\xff\x1f', b'\xff\x3f', b'\xc0\x70', b'\xc0\xe0', b'\xc0\xe0', b'\xc0\x70', b'\xff\x3f', b'\xff\x1f', b'\x00\x00']
        byte_data = [b'\x00\x00', b'\x1f\xff', b'\x3f\xff', b'\x70\xc0', b'\xe0\xc0', b'\xe0\xc0', b'\x70\xc0', b'\x3f\xff', b'\x1f\xff', b'\x00\x00']
        # byte_data = [b'\x18', b'\x3c', b'\x7e', b'\xe7', b'\xc3', b'\xc3', b'\xc3', b'\xc3', b'\xff', b'\xff', b'\xc3', b'\xc3', b'\xc3', b'\xc3', b'\xc3', b'\xc3', b'\x01', b'\x01', b'\x01', b'\x01']
        
        # for middle 8
        # byte_data = [b'\x00\x00', b'\xe0\x03', b'\xe0\x07', b'\x80\x0c', b'\x80\x0c', b'\xe0\x07', b'\xe0\x03', b'\x00\x00']
        
        for i in range(len(byte_data)):
            self.send_data(byte_data[i])
            time.sleep(self.time_delay)

    def send_col_data(self, byte_data):
        self.ser.write(byte_data)
        # message = "03"
        # ascii_values = [ord(char) for char in message]

        # # Send each ASCII value over the serial connection
        # for ascii_val in ascii_values:
        #     self.ser.write(bytes([ascii_val]))

    def send_end(self):
        message = "END"
        ascii_values = [ord(char) for char in message]

        # Send each ASCII value over the serial connection
        for ascii_val in ascii_values:
            self.ser.write(bytes([ascii_val]))

    def test(self):
        byte_list = [
            b'\x00\x01', b'\x00\x00', b'\x00\x00', b'\x00\x00', b'\x00\x00',
            b'\x00\x00', b'\x00\x00', b'\x00\x00', b'\x00\x00', b'\x00\x00',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
            b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01', b'\x00\x01',
        ]
        for i in range(50):
            time.sleep(self.time_delay)
            self.send_data(byte_list[i])

    def test_16x16(self):
        str = " A B C D E F G H I J K L M N O P Q R S T U V W X Y Z"
        byte_list = []
        for i in str:
            if(i == ' '):
                byte_list.append(b'\x00\x00\x00\x00')
            else: 
                byte_list.extend(self.generate(CHAR_MATRICES[i]))
                byte_list.append(b'\x00\x00')
        # return 
        if byte_list:
            byte_len = len(byte_list)
            for i in range(byte_len):
                self.send_data(byte_list[i])
                time.sleep(self.time_delay)

    def send_fix(self):
        ''' Method to handle fix data sending to the board, if self.fix_coach is true then it sends train_no else it send coach_no
         every time when this method is called it will detect what previously send and send other one. what previously send is 
          detected by the flag fix_coach '''
        self.fix_data = self.data['fix_part']['train_no'] if self.fix_coach else self.data['fix_part']['coach_no']
        self.send_strt()
        self.send_fix_data(self.fix_data)
        self.send_end()
        self.fix_coach = not self.fix_coach

    def send_moving(self):
        for i in range(MOVING_LOOP_COUNT):
            self.run(self.data['moving_part']['train_from_to'])
            self.clear(128-len(str(self.fix_data)))
        self.send_fix()
        for i in range(MOVING_LOOP_COUNT):
            self.run(self.data['moving_part']['train_name'])
            self.clear(128-len(str(self.fix_data)))
        self.send_fix()
        for i in range(MOVING_LOOP_COUNT):
            self.run(self.data['moving_part']['train_via'])
            self.clear(128-len(str(self.fix_data)))

    def start(self):
        self.occupy = True
        self.send_fix()
        self.send_moving()
        self.occupy = False
